-- The lines following "--" are comments written by the developers.
-- Insert the respective SQL Code Into the SQL database as a developer to view realtime database changes in MySqlWorkBench

CREATE DATABASE IF NOT EXISTS CheckInndb;
USE CheckInndb;

-- Creation of the Status Table for room statuses sch as Vacant, Occupied, Out of Order

CREATE TABLE IF NOT EXISTS Statuses (
    status_id INT AUTO_INCREMENT PRIMARY KEY,
    status_info VARCHAR(100) NOT NULL
);

INSERT INTO Statuses (status_id, status_info) VALUES (1, 'Vacant'), (2, 'Occupied'), (3, 'Out of Order'); -- Storing statuses into database (HardCoded)

-- Creation of the User Table to store the User Data linking it to Bookings, Admin, Invoice, etcetera

CREATE TABLE IF NOT EXISTS User (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    phone_number VARCHAR(20),
    email VARCHAR(100) UNIQUE NOT NULL,
    `password` VARCHAR(255) NOT NULL
);

-- Creation of the Administrator Table to store the administrator data and load bookings, client data, statuses onto admin dashboard

CREATE TABLE IF NOT EXISTS Admin (
    admin_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    status_id INT,
    `password` VARCHAR(255) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES User(user_id)
        ON DELETE CASCADE ON UPDATE CASCADE,
        FOREIGN KEY (status_id) REFERENCES Statuses(status_id) ON DELETE SET NULL ON UPDATE CASCADE
);

-- Creation of Room Table to store the room data

CREATE TABLE IF NOT EXISTS Room (
    room_id INT PRIMARY KEY not null,
    room_type varchar(50) not null,
    price decimal(15,2),
    `description` TEXT,
    image_path varchar(150),
    status_id INT default 1,
    FOREIGN KEY (status_id) REFERENCES Statuses(status_id)
        ON DELETE SET NULL ON UPDATE CASCADE
);

-- Inserting the data for 4 sample rooms in the database to perform proper operations in the CheckInn Application

INSERT INTO Room (room_id,room_type, price, `description`, image_path, status_id) VALUES
(1,'Single Room', 2000.00, 'Perfect for the solo traveler, our Single Room offers a peaceful and efficient space to unwind. It features a comfortable single bed, a dedicated work desk, and modern amenities to ensure a productive and restful stay. The room provides a quiet sanctuary, ideal for relaxing after a busy day of exploring the city or attending meetings. Enjoy a blend of comfort and convenience tailored just for you..', '/images/singleroom.jpg', 1),
(2,'Double Room', 3000.00, 'Ideal for couples or friends traveling together, our Double Room provides ample space and comfort. It is furnished with a plush double bed and a cozy seating area, creating a warm and inviting atmosphere. The room is equipped with all the essential amenities needed for a memorable stay. Whether you''re starting your day with a fresh coffee or winding down in the evening, this room is your perfect home away from home..', '/images/doubleroom.jpg', 1),
(3,'Deluxe Room', 5000.00, 'Indulge in an elevated experience in our spacious Deluxe Room, where modern luxury meets exceptional comfort. This room features premium furnishings, a king-sized bed, and large windows offering stunning city views. The elegant decor and enhanced amenities, including a minibar and plush bathrobes, create a truly sophisticated environment. It''s the perfect choice for guests seeking an extra touch of class and a more memorable, relaxing stay.', '/images/Deluxe.jpg', 1),
(4,'Executive Suite', 8000.00, 'Experience the pinnacle of luxury and sophistication in our Executive Suite. This expansive suite offers a private world of comfort, featuring a separate living area for entertaining or relaxing, and a master bedroom with a luxurious king sized bed. Enjoy exclusive access to premium services, state-of-the-art entertainment systems, and breathtaking panoramic views. The suite is meticulously designed for discerning guests who demand the utmost in space, privacy, and elegance..', '/images/executive room.jpg', 1);


-- Creation of the MenuItem Table to store the MenuItems offered by CheckInn to the clients.

CREATE TABLE IF NOT EXISTS MenuItem (
    menu_id INT AUTO_INCREMENT PRIMARY KEY,
    itemname VARCHAR(100) NOT NULL,
    price decimal(10,2) NOT NULL
);

-- Storing the 4 CheckInn Packages offered by CheckInn Application's respective Hotel

INSERT INTO MenuItem (menu_id, itemname, price) VALUES
(1, 'Breakfast Package', 500.00),
(2, 'Brunch Package', 850.00),
(3, 'Lunch Package', 1000.00),
(4, 'Dinner Package', 1500.00);

-- Creation of the respective CheckInn Applications Booking Tables

CREATE TABLE IF NOT EXISTS Booking (
    booking_id INT AUTO_INCREMENT PRIMARY KEY,
    room_id INT NOT NULL,
    user_id INT NOT NULL,
    invoice_id INT,
    status_id INT,
    CheckIn_date DATETIME NOT NULL,
    CheckOut_date DATETIME NOT NULL,
    total_price DECIMAL(10,2),
    FOREIGN KEY (room_id) REFERENCES Room(room_id)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES User(user_id)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (status_id) REFERENCES Statuses(status_id)
        ON DELETE SET NULL ON UPDATE CASCADE
);

-- Creation of the Invoice table so that the invoice for a booking is generated and can be viewed in booking history

CREATE TABLE IF NOT EXISTS Invoice (
    invoice_id INT AUTO_INCREMENT PRIMARY KEY,
    booking_id INT NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    invoice_date DATETIME NOT NULL,
    payment_method VARCHAR(50) NOT NULL,
    FOREIGN KEY (booking_id) REFERENCES Booking(booking_id)
        ON DELETE CASCADE ON UPDATE CASCADE
);

-- Creation of the Booking Menu Item table to link bookings with menu items following a normalized database structure

CREATE TABLE BookingMenuItem (
    id INT AUTO_INCREMENT PRIMARY KEY,
    booking_id INT NOT NULL,
    menu_id INT NOT NULL,
    FOREIGN KEY (booking_id) REFERENCES Booking(booking_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (menu_id) REFERENCES MenuItem(menu_id)
);

-- Creation of the Review Table to link the users to the reviews which can be viewed by the administrator.

CREATE TABLE IF NOT EXISTS Review (
    review_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    review_text VARCHAR(4000) NOT NULL,
    review_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES User(user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Adding a foreign key for invoice to the booking table so that a booking is linked to the invoice.

ALTER TABLE Booking
ADD CONSTRAINT fk_booking_invoice
FOREIGN KEY (invoice_id) REFERENCES Invoice(invoice_id)
    ON DELETE SET NULL ON UPDATE CASCADE;
